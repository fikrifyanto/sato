name: Deploy Laravel to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}:latest
          docker build -f Dockerfile.prod -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo mkdir -p /var/www
            sudo chown -R $USER:$USER /var/www
            cd /var/www

            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts

            # Clone repo sato
            if [ ! -d "sato/.git" ]; then
              git clone https://x-access-token:${{ secrets.GHCR_TOKEN }}@github.com/${{ github.repository }}.git sato
            fi

            # Enter folder sato
            cd sato

            # Reset branch main
            git fetch --all
            git reset --hard origin/main

            # Create .env.production
            cat > .env.production <<EOL
            APP_NAME=Laravel
            APP_ENV=${{ vars.APP_ENV }}
            APP_KEY=${{ vars.APP_KEY }}
            APP_DEBUG=false
            APP_URL=${{ vars.APP_URL }}

            DB_CONNECTION=${{ secrets.DB_CONNECTION }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}

            POSTGRES_DB=${{ secrets.DB_DATABASE }}
            POSTGRES_USER=${{ secrets.DB_USERNAME }}
            POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}

            CACHE_DRIVER=file
            QUEUE_CONNECTION=database
            SESSION_DRIVER=file
            EOL

            # Login to docker
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest image
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d --remove-orphans

            # Clear docker images
            docker image prune -f
